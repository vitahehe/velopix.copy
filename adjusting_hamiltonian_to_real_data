import numpy as np
import itertools
import scipy.sparse as sp
from scipy.sparse import dok_matrix, csc_matrix
from joblib import Parallel, delayed
from dwave.system import LeapHybridSampler
import dimod
import os
os.environ['DWAVE_API_TOKEN'] = 'DEV-b59f413d6a1407427e9f0079dd8e3cfb8106e58d'
def qubosolverHr(A, b):
    A = csc_matrix(A)
    bqm = dimod.BinaryQuadraticModel.empty(dimod.BINARY)
    bqm.add_variables_from({i: b[i] for i in range(len(b))})
    
    row, col = A.nonzero()  # Get non-zero entries in the matrix A
    for i, j in zip(row, col):
        if i != j:
            bqm.add_interaction(i, j, A[i, j])

    # Debug prints
    print("Constructed Binary Quadratic Model:")
    print(bqm)

    # Use LeapHybridSampler to solve
    sampler = LeapHybridSampler()
    response = sampler.sample(bqm)
    best_sample = response.first.sample
    sol_sample = np.fromiter(best_sample.values(), dtype=int)
    
    # Debug prints
    print(f"Solver response: {response}")
    print(f"Best sample: {best_sample}")
    print(f"Solution Hybrid: {sol_sample}")

    return sol_sample

# Define the Segment class according to the logic of the original Hamiltonian
class Segment:
    def __init__(self, from_hit, to_hit):
        self.from_hit = from_hit
        self.to_hit = to_hit

    def to_vect(self):
        """Returns the vector representation of the segment."""
        return np.array([
            self.to_hit.x - self.from_hit.x,
            self.to_hit.y - self.from_hit.y,
            self.to_hit.z - self.from_hit.z
        ])

# Angular and bifurcation consistency checks
def angular_and_bifurcation_checks(i, vectors, norms, segments, N, alpha, eps):
    """Performs angular consistency and bifurcation checks for a given index `i`."""
    results_ang = []
    results_bif = []
    
    vect_i = vectors[i]
    norm_i = norms[i]
    seg_i = segments[i]

    for j in range(i + 1, N):  # Only upper triangle
        vect_j = vectors[j]
        norm_j = norms[j]
        cosine = np.dot(vect_i, vect_j) / (norm_i * norm_j)

        # Angular consistency
        if np.abs(cosine - 1) < eps:
            results_ang.append((i, j, 1))

        # Bifurcation consistency
        seg_j = segments[j]
        if seg_i.from_hit == seg_j.from_hit and seg_i.to_hit != seg_j.to_hit:
            results_bif.append((i, j, -alpha))
        elif seg_i.from_hit != seg_j.from_hit and seg_i.to_hit == seg_j.to_hit:
            results_bif.append((i, j, -alpha))

    return results_ang, results_bif

# Adapted Hamiltonian function for real data
def generate_hamiltonian_real_data(event, params):
    lambda_val = params.get('lambda')
    alpha = params.get('alpha')
    beta = params.get('beta')

    non_empty_modules = [m for m in event.modules if m.z]

# Now sort the non-empty modules
    modules = sorted(non_empty_modules, key=lambda m: min(m.z))
    # Generate segments between hits in adjacent modules
    segments = []
    for idx in range(len(modules) - 1):
        module_from = modules[idx]
        module_to = modules[idx + 1]
        hits_from = list(module_from)
        hits_to = list(module_to)
        for from_hit, to_hit in itertools.product(hits_from, hits_to):
            seg = Segment(from_hit, to_hit)
            segments.append(seg)
    
    N = len(segments)
    b = np.zeros(N)

    # Precompute vectors and norms
    vectors = np.array([seg.to_vect() for seg in segments])
    norms = np.linalg.norm(vectors, axis=1)

    eps = 1e-9  # Precision threshold

    # Perform angular and bifurcation checks in parallel
    results = Parallel(n_jobs=-1, backend="loky")(
        delayed(angular_and_bifurcation_checks)(i, vectors, norms, segments, N, alpha, eps)
        for i in range(N)
    )

    # Aggregate results
    A_ang = dok_matrix((N, N), dtype=np.float64)
    A_bif = dok_matrix((N, N), dtype=np.float64)

    for ang_results, bif_results in results:
        for i, j, value in ang_results:
            A_ang[i, j] = value
            A_ang[j, i] = value  # Symmetric
        for i, j, value in bif_results:
            A_bif[i, j] = value
            A_bif[j, i] = value  # Symmetric

    # Convert angular and bifurcation matrices to sparse format
    A_ang = A_ang.tocsc()
    A_bif = A_bif.tocsc()

    # Inhibitory interactions: penalty for segments sharing the same hit
    A_inh = dok_matrix((N, N), dtype=np.float64)
    for i in range(N):
        seg_i = segments[i]
        for j in range(i + 1, N):
            seg_j = segments[j]
            if seg_i.from_hit == seg_j.from_hit or seg_i.to_hit == seg_j.to_hit:
                A_inh[i, j] = beta
                A_inh[j, i] = beta  # Symmetric
    A_inh = A_inh.tocsc()

    # Combine matrices into the Hamiltonian
    A = -1 * (A_ang + A_bif + A_inh)

    return A, b, segments
from event_model.event_model import event
 # Assuming this imports the event class
import json
import os

# Load your real event data (assuming it's in JSON format)
events_folder = 'events'
filename = 'velo_event_2.json'
file_path = os.path.join(events_folder, filename)

# Load the JSON data
with open(file_path, 'r') as f:
    real_data_json = json.load(f)

# Create an event object
eventt = event(real_data_json)

# Define your parameters
params = {
    'lambda': 1.0,
    'alpha': 1,
    'beta': 1
}

# Generate the Hamiltonian
A, b, segments = generate_hamiltonian_real_data(eventt, params)

print(A.toarray())

solution = qubosolverHr(A, b)

print(solution)



