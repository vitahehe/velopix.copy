import hashlib
import numpy as np
import itertools
from scipy.sparse import lil_matrix, block_diag
import json


filepath = 'C:/Users/Vita/Documents/GitHub/velopix.copy-1/events/velo_event_2.json'

with open(filepath, 'r') as f:
    json_data = json.load(f)

print("Loaded json_data with keys:", json_data.keys())
print("Number of modules (from module_prefix_sum):", len(json_data["module_prefix_sum"]) - 1)
print("Number of hits (from x, y, z arrays):", len(json_data["x"]))

class Event(object):
    '''Event defined by its json description.'''
    def __init__(self, json_data):
        self.number_of_modules = len(json_data["module_prefix_sum"]) - 1
        print("Event has {} modules.".format(self.number_of_modules))
        self.description = json_data.get("description", "")
        self.montecarlo = json_data.get("montecarlo", "")
        self.module_prefix_sum = json_data["module_prefix_sum"]
        self.number_of_hits = self.module_prefix_sum[self.number_of_modules]
        self.hits = []
        self.with_t = "t" in json_data

        self.modules = []
        for m in range(self.number_of_modules):
            start_idx = self.module_prefix_sum[m]
            end_idx = self.module_prefix_sum[m + 1]
            module_hits = []
            z_values = set()
            for i in range(start_idx, end_idx):
                if self.with_t:
                    new_hit = Hit(
                        x=json_data["x"][i],
                        y=json_data["y"][i],
                        z=json_data["z"][i],
                        hit_id=i,
                        module=m,
                        t=json_data["t"][i],
                        with_t=True
                    )
                else:
                    new_hit = Hit(
                        x=json_data["x"][i],
                        y=json_data["y"][i],
                        z=json_data["z"][i],
                        hit_id=i,
                        module=m
                    )
                self.hits.append(new_hit)
                module_hits.append(new_hit)
                z_values.add(json_data["z"][i])
            # Assuming each module has a single z value
            module_z = z_values.pop() if len(z_values) == 1 else np.mean(list(z_values))
            new_module = Module(
                module_number=m,
                z=module_z,
                hits=module_hits
            )
            self.modules.append(new_module)

        # Print the total number of hits
        print("Total number of hits in event:", len(self.hits))
        # Print the number of modules created
        print("Total number of modules in event:", len(self.modules))

    def compute_hamiltonian(self, hamiltonian_function, params):
        '''Compute the Hamiltonian for the event using the provided hamiltonian_function.
        
        The hamiltonian_function should accept the event and params as arguments.
        '''
        return hamiltonian_function(self, params)

class Track(object):
    '''A track, essentially a list of hits.'''
    def __init__(self, hits):
        self.hits = hits
        self.missed_last_module = False
        self.missed_penultimate_module = False

    def add_hit(self, hit):
        self.hits.append(hit)

    def __repr__(self):
        return "Track with " + str(len(self.hits)) + " hits: " + str(self.hits)

    def __iter__(self):
        return iter(self.hits)

    def __eq__(self, other):
        return self.hits == other.hits

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return int.from_bytes(hashlib.sha256(
            ''.join([str(h.id) for h in self.hits]).encode('utf-8')).digest(), byteorder='big')

class Hit(object):
    '''A hit, composed of an id and its x, y, and z coordinates.
    It may optionally contain the number of the module where
    the hit happened.
    '''
    def __init__(self, x, y, z, hit_id, module=-1, t=0, with_t=False):
        self.x = x
        self.y = y
        self.z = z
        self.t = t
        self.id = hit_id
        self.module_number = module
        self.module_id = module  # Alias for module_number
        self.with_t = with_t

    def __getitem__(self, index):
        if index < 0 or index > 2:
            raise IndexError
        if index == 0:
            return self.x
        elif index == 1:
            return self.y
        else:
            return self.z

    def __repr__(self):
        return "#" + str(self.id) + " module " + str(self.module_number) + \
            " {" + str(self.x) + ", " + \
            str(self.y) + ", " + str(self.z) + \
            (", " + str(self.t) if self.with_t else "") + "}"

    def __eq__(self, other):
        return self.id == other.id

    def __ne__(self, other):
        return not self.__eq__(other)

    def __hash__(self):
        return self.id

class Module(object):
    '''A module is identified by its number.
    It also contains the z coordinate where it sits and
    the list of hits it holds.
    '''
    def __init__(self, module_number, z, hits):
        self.module_number = int(module_number)
        self.z = z  # Single z value
        self.hits_list = hits

    def __iter__(self):
        return iter(self.hits())

    def __repr__(self):
        return "module " + str(self.module_number) + ":\n" + \
            " At z: " + str(self.z) + "\n" + \
            " Number of hits: " + str(len(self.hits())) + "\n" + \
            " Hits (#id {x, y, z}): " + str(self.hits())

    def hits(self):
        return self.hits_list

class Segment(object):
    '''Represents a segment between two hits.'''
    def __init__(self, from_hit, to_hit):
        self.from_hit = from_hit
        self.to_hit = to_hit

    def to_vect(self):
        '''Returns the vector from from_hit to to_hit.'''
        return np.array([
            self.to_hit.x - self.from_hit.x,
            self.to_hit.y - self.from_hit.y,
            self.to_hit.z - self.from_hit.z
        ])

    def __eq__(self, other):
        return self.from_hit == other.from_hit and self.to_hit == other.to_hit

    def __hash__(self):
        return hash((self.from_hit, self.to_hit))

    def __repr__(self):
        return f"Segment(from_hit={self.from_hit.id}, to_hit={self.to_hit.id})"

# Now, let's adjust your Hamiltonian function
def generate_hamiltonian_optimized(event, params):
    lambda_val = params.get('lambda', 100.0)
    alpha = params.get('alpha', 1.0)
    beta = params.get('beta', 1.0)

    modules = sorted(event.modules, key=lambda module: module.z)
    print("Modules sorted by z-coordinate.")

    segments = []
    for idx in range(len(modules) - 1):
        module_from = modules[idx]
        module_to = modules[idx + 1]
        # Optionally, print module indices and z-values
        print(f"Creating segments between Module {module_from.module_number} (z={module_from.z}) "
              f"and Module {module_to.module_number} (z={module_to.z}).")
        for from_hit, to_hit in itertools.product(module_from.hits(), module_to.hits()):
            segments.append(Segment(from_hit, to_hit))

    N = len(segments)
    print("Number of segments created:", N)

    A_ang_blocks = []
    A_bif_blocks = []
    A_inh_blocks = []
    b = np.zeros(N)

    block_size = 500
    num_blocks = (N + block_size - 1) // block_size
    print("Number of blocks:", num_blocks)

    for block_idx in range(num_blocks):
        start_idx = block_idx * block_size
        end_idx = min(start_idx + block_size, N)
        print(f"Processing block {block_idx + 1}/{num_blocks} "
              f"(segments {start_idx} to {end_idx - 1}).")

        # lil_matrix for each block
        size = end_idx - start_idx
        A_ang_block = lil_matrix((size, size), dtype=np.float32)
        A_bif_block = lil_matrix((size, size), dtype=np.float32)
        A_inh_block = lil_matrix((size, size), dtype=np.float32)

        # Filling
        for i in range(start_idx, end_idx):
            seg_i = segments[i]
            vect_i = seg_i.to_vect()
            norm_i = np.linalg.norm(vect_i)
            if norm_i == 0:
                print(f"Zero-length vector encountered at segment {i}. Skipping.")
                continue  # Skip zero-length vectors

            for j in range(i + 1, end_idx):
                seg_j = segments[j]
                vect_j = seg_j.to_vect()
                norm_j = np.linalg.norm(vect_j)
                if norm_j == 0:
                    continue 

                # Avoid division by zero
                denominator = norm_i * norm_j
                if denominator == 0:
                    continue

                cosine = np.dot(vect_i, vect_j) / denominator


                if np.abs(cosine - 1) < 1e-9:
                    A_ang_block[i - start_idx, j - start_idx] = 1
                    A_ang_block[j - start_idx, i - start_idx] = 1  # Symmetry with positive sign

                if seg_i.from_hit == seg_j.from_hit and seg_i.to_hit != seg_j.to_hit:
                    A_bif_block[i - start_idx, j - start_idx] = -alpha
                    A_bif_block[j - start_idx, i - start_idx] = -alpha 

                if seg_i.from_hit != seg_j.from_hit and seg_i.to_hit == seg_j.to_hit:
                    A_bif_block[i - start_idx, j - start_idx] = -alpha
                    A_bif_block[j - start_idx, i - start_idx] = -alpha  # Symmetry with negative sign

                s_ab = int(seg_i.from_hit.module_id == 1 and seg_j.to_hit.module_id == 1)
                if s_ab > 0:
                    A_inh_block[i - start_idx, j - start_idx] = beta * s_ab * s_ab
                    A_inh_block[j - start_idx, i - start_idx] = beta * s_ab * s_ab  # Symmetry with positive sign

        A_ang_blocks.append(A_ang_block)
        A_bif_blocks.append(A_bif_block)
        A_inh_blocks.append(A_inh_block)

    A_ang = block_diag(A_ang_blocks, format='csc')
    A_bif = block_diag(A_bif_blocks, format='csc')
    A_inh = block_diag(A_inh_blocks, format='csc')

    A = -1 * (A_ang + A_bif + A_inh)

    print("Hamiltonian matrices constructed.")
    print("Shape of A_ang:", A_ang.shape)
    print("Shape of A_bif:", A_bif.shape)
    print("Shape of A_inh:", A_inh.shape)
    print("Shape of A:", A.shape)

    return A, b, segments

event = Event(json_data)
params = {
    'lambda': 100.0,
    'alpha': 1.0,
    'beta': 1.0
}

print("Computing Hamiltonian...")
A, b, segments = event.compute_hamiltonian(generate_hamiltonian_optimized, params)
print(A.toarray())
print("Hamiltonian computed.")
